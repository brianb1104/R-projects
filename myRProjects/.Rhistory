})
output$iristable <- renderDataTable(iris)
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
ui <- dashboardPage( skin = "red",
dashboardHeader(title = "My dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Iris", tabName = "iris", icon = icon("tree")),
menuItem("Iris2", tabName = "iris", icon = icon("card"))
)
),
dashboardBody(
tabItems(
tabItem("iris",
fluidRow(
box(plotOutput("correlation_plot"), width = 8),
box(
selectInput("features", "Features:",
c("Sepal.Width","Petal.Length",
"Petal.Width")), width = 4
)
),
fluidRow(
box(title = "Box title", "Box content"),
box(status = "Species", "Petal.Width")
),
tabItem("iris",
fluidPage(
h1("iris2"),
dataTableOutput("iristable")
)
)
)
)
)
)
server <- function(input, output){
output$correlation_plot <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]],
xlab = "Sepal length", ylab= "Feature")
})
output$iristable <- renderDataTable(iris)
}
shinyApp(ui, server)
head(iris)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
ui <- dashboardPage( skin = "red",
dashboardHeader(title = "My dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Iris", tabName = "iris", icon = icon("tree")),
menuItem("Iris2", tabName = "iris", icon = icon("card"))
)
),
dashboardBody(
tabItems(
tabItem("iris",
fluidRow(
box(plotOutput("correlation_plot"), width = 8),
box(
selectInput("features", "Features:",
c("Sepal.Width","Petal.Length",
"Petal.Width")), width = 4
)
),
tabItem("iris",
fluidPage(
h1("iris2"),
dataTableOutput("iristable")
)
)
)
)
)
)
server <- function(input, output){
output$correlation_plot <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]],
xlab = "Sepal length", ylab= "Feature")
})
output$iristable <- renderDataTable(iris)
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
ui <- dashboardPage( skin = "red",
dashboardHeader(title = "My dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Iris", tabName = "iris", icon = icon("tree")),
menuItem("Iris2", tabName = "iris", icon = icon("card"))
)
),
dashboardBody(
tabItems(
tabItem("iris",
fluidRow(
box(plotOutput("correlation_plot"), width = 8),
box(
selectInput("features", "Features:",
c("Sepal.Width","Petal.Length",
"Petal.Width")), width = 4
)
),
tabItem(
plotOutput("iris")
),
tabItem("iris",
fluidPage(
h1("iris2"),
dataTableOutput("iristable")
)
)
)
)
)
)
server <- function(input, output){
output$correlation_plot <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]],
xlab = "Sepal length", ylab= "Feature")
})
output$iristable <- renderDataTable(iris)
output$barchart <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]])
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
ui <- dashboardPage( skin = "red",
dashboardHeader(title = "My dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Iris", tabName = "iris", icon = icon("tree")),
menuItem("Iris2", tabName = "iris", icon = icon("card"))
)
),
dashboardBody(
tabItems(
tabItem("iris",
fluidRow(
box(plotOutput("correlation_plot"), width = 8),
box(
selectInput("features", "Features:",
c("Sepal.Width","Petal.Length",
"Petal.Width")), width = 4
)
),
tabItem(
plotOutput("iris")
),
tabItem("iris",
fluidPage(
h1("iris2"),
dataTableOutput("iristable")
)
)
)
)
)
)
server <- function(input, output){
output$correlation_plot <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]],
xlab = "Sepal length", ylab= "Feature")
})
output$iristable <- renderDataTable(iris)
output$barchart <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]])
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
ui <- dashboardPage( skin = "red",
dashboardHeader(title = "My dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Iris", tabName = "iris", icon = icon("tree")),
menuItem("Iris2", tabName = "iris", icon = icon("card"))
)
),
dashboardBody(
tabItems(
tabItem("iris",
fluidRow(
box(plotOutput("correlation_plot"), width = 8),
box(
selectInput("features", "Features:",
c("Sepal.Width","Petal.Length",
"Petal.Width")), width = 4
)
),
tabItem(
plotOutput("barchart")
),
tabItem("iris",
fluidPage(
h1("iris2"),
dataTableOutput("iristable")
)
)
)
)
)
)
server <- function(input, output){
output$correlation_plot <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]],
xlab = "Sepal length", ylab= "Feature")
})
output$iristable <- renderDataTable(iris)
output$barchart <- renderPlot({
barplot(iris$Sepal.Length, iris[[input$features]])
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
ui <- dashboardPage( skin = "red",
dashboardHeader(title = "My dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Iris", tabName = "iris", icon = icon("tree")),
menuItem("Iris2", tabName = "iris", icon = icon("card"))
)
),
dashboardBody(
tabItems(
tabItem("iris",
fluidRow(
box(plotOutput("correlation_plot"), width = 8),
box(
selectInput("features", "Features:",
c("Sepal.Width","Petal.Length",
"Petal.Width")), width = 4
)
),
tabItem(
plotOutput("barchart")
),
tabItem("iris",
fluidPage(
h1("iris2"),
dataTableOutput("iristable")
)
)
)
)
)
)
server <- function(input, output){
output$correlation_plot <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]],
xlab = "Sepal length", ylab= "Feature")
})
output$iristable <- renderDataTable(iris)
output$barchart <- renderPlot({
barplot(iris$Sepal.Length, iris[[input$features]])
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
ui <- dashboardPage( skin = "red",
dashboardHeader(title = "My dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Iris", tabName = "iris", icon = icon("tree")),
menuItem("Iris2", tabName = "iris", icon = icon("card"))
)
),
dashboardBody(
tabItems(
tabItem("iris",
fluidRow(
box(plotOutput("correlation_plot"), width = 8),
box(
selectInput("features", "Features:",
c("Sepal.Width","Petal.Length",
"Petal.Width")), width = 4
)
),
tabItem(
plotOutput("barchart")
),
tabItem("iris",
fluidPage(
h1("iris2"),
dataTableOutput("iristable")
)
)
)
)
)
)
server <- function(input, output){
output$correlation_plot <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]],
xlab = "Sepal length", ylab= "Feature")
})
output$iristable <- renderDataTable(iris)
output$barchart <- renderPlot({
barplot(iris)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
ui <- dashboardPage( skin = "red",
dashboardHeader(title = "My dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Iris", tabName = "iris", icon = icon("tree")),
menuItem("Iris2", tabName = "iris", icon = icon("card"))
)
),
dashboardBody(
tabItems(
tabItem("iris",
fluidRow(
box(plotOutput("correlation_plot"), width = 8),
box(
selectInput("features", "Features:",
c("Sepal.Width","Petal.Length",
"Petal.Width")), width = 4
)
),
tabItem("iris",
fluidPage(
plotOutput("barchart")
)
),
tabItem("iris",
fluidPage(
h1("iris2"),
dataTableOutput("iristable")
)
)
)
)
)
)
server <- function(input, output){
output$correlation_plot <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]],
xlab = "Sepal length", ylab= "Feature")
})
output$iristable <- renderDataTable(iris)
output$barchart <- renderPlot({
barplot(iris)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
ui <- dashboardPage( skin = "red",
dashboardHeader(title = "My dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Iris", tabName = "iris", icon = icon("tree")),
menuItem("Iris2", tabName = "iris", icon = icon("card"))
)
),
dashboardBody(
tabItems(
tabItem("iris",
fluidRow(
box(plotOutput("correlation_plot"), width = 8),
box(
selectInput("features", "Features:",
c("Sepal.Width","Petal.Length",
"Petal.Width")), width = 4
)
),
tabItem("iris",
fluidPage(
plotOutput("barchart")
)
),
tabItem("iris",
fluidPage(
h1("iris2"),
dataTableOutput("iristable")
)
)
)
)
)
)
server <- function(input, output){
output$correlation_plot <- renderPlot({
plot(iris$Sepal.Length, iris[[input$features]],
xlab = "Sepal length", ylab= "Feature")
})
output$iristable <- renderDataTable(iris)
output$barchart <- renderPlot({
barplot(iris$Sepal.Length, iris[[input$features]],
xlab = "Sepal length", ylab= "Feature")
})
}
shinyApp(ui, server)
housing <- read.csv("housing.csv")
housingData = housing[,c("population","households")]
relation = lm(housingData$population~housingData$households)
png(file="pop_vs_houho")
ggplot(housingData$population,housingData$households,
main="Population vs Household",
abline(lm(population ~ households, housingData)),
xlab="housingData$population", ylab="housingData$households")
while (!is.null(dev.list()))  dev.
library(ggplot2)
housing <- read.csv("housing.csv")
housingData = housing[,c("population","households")]
relation = lm(housingData$population~housingData$households)
png(file="pop_vs_houho")
ggplot(housingData$population,housingData$households,
main="Population vs Household",
abline(lm(population ~ households, housingData)),
xlab="housingData$population", ylab="housingData$households")
while (!is.null(dev.list()))  dev.
housing <- read.csv("housing.csv")
housingData = housing[,c("population","households")]
relation = lm(housingData$population~housingData$households)
png(file="pop_vs_houho")
plot(housingData$population,housingData$households,
main="Population vs Household",
abline(lm(population ~ households, housingData)),
xlab="housingData$population", ylab="housingData$households")
while (!is.null(dev.list()))  dev.
housing <- read.csv("housing.csv")
housingData = housing[,c("population","households")]
relation = lm(housingData$population~housingData$households)
png(file="pop_vs_houho")
plot(housingData$population,housingData$households,
main="Population vs Household",
abline(lm(population ~ households, housingData)),
xlab="housingData$population", ylab="housingData$households")
while (!is.null(dev.list()))  dev.off()
housing <- read.csv("housing.csv")
housingData = housing[,c("population","households")]
relation = lm(housingData$population~housingData$households)
png(file="pop_vs_houho")
plot(housingData$population,housingData$households,
main="Population vs Household",
abline(lm(population ~ households, housingData)),
xlab="housingData$population", ylab="housingData$households")
while (!is.null(dev.list()))  dev.off()
summary(housing)
cat_columns = names(cat_housing)
keep_columns = cat_columns[cat_columns != 'ocean_proximity']
cat_housing = select(cat_housing,one_of(keep_columns))
tail(cat_housing)
cat_housing = data.frame(ocean_proximity = housing$ocean_proximity)
cat_columns = names(cat_housing)
keep_columns = cat_columns[cat_columns != 'ocean_proximity']
cat_housing = select(cat_housing,one_of(keep_columns))
tail(cat_housing)
cat_housing = data.frame(ocean_proximity = housing$ocean_proximity)
cat_columns = names(cat_housing)
keep_columns = cat_columns[cat_columns != 'ocean_proximity']
cat_housing = select(cat_housing,one_of(keep_columns))
head(cat_housing)
categories = unique(housing$ocean_proximity)
cat_housing = data.frame(ocean_proximity = housing$ocean_proximity)
for(cat in categories){
cat_housing[,cat] = rep(0, times= nrow(cat_housing))
}
for(i in 1:length(cat_housing$ocean_proximity)){
cat = as.character(cat_housing$ocean_proximity[i])
cat_housing[,cat][i] = 1
cat_columns = names(cat_housing)
keep_columns = cat_columns[cat_columns != 'ocean_proximity']
cat_housing = select(cat_housing,one_of(keep_columns))
head(cat_housing)
categories = unique(housing$ocean_proximity)
cat_housing = data.frame(ocean_proximity = housing$ocean_proximity)
for(cat in categories){
cat_housing[,cat] = rep(0, times= nrow(cat_housing))
}
for(i in 1:length(cat_housing$ocean_proximity)){
cat = as.character(cat_housing$ocean_proximity[i])
cat_housing[,cat][i] = 1
cat_columns = names(cat_housing)
keep_columns = cat_columns[cat_columns != 'ocean_proximity']
cat_housing = select(cat_housing,one_of(keep_columns))
head(cat_housing)
setwd("~/GitHub/myRProject/R-projects/myRProjects/ShinyAPP")
source('~/GitHub/myRProject/R-projects/myRProjects/ShinyAPP/app.R')
